//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserAccessTokens = newUserAccessTokensTable("public", "user_access_tokens", "")

type userAccessTokensTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Secret    postgres.ColumnString
	ExpiresAt postgres.ColumnTimestampz
	UserID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserAccessTokensTable struct {
	userAccessTokensTable

	EXCLUDED userAccessTokensTable
}

// AS creates new UserAccessTokensTable with assigned alias
func (a UserAccessTokensTable) AS(alias string) *UserAccessTokensTable {
	return newUserAccessTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAccessTokensTable with assigned schema name
func (a UserAccessTokensTable) FromSchema(schemaName string) *UserAccessTokensTable {
	return newUserAccessTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAccessTokensTable with assigned table prefix
func (a UserAccessTokensTable) WithPrefix(prefix string) *UserAccessTokensTable {
	return newUserAccessTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAccessTokensTable with assigned table suffix
func (a UserAccessTokensTable) WithSuffix(suffix string) *UserAccessTokensTable {
	return newUserAccessTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAccessTokensTable(schemaName, tableName, alias string) *UserAccessTokensTable {
	return &UserAccessTokensTable{
		userAccessTokensTable: newUserAccessTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newUserAccessTokensTableImpl("", "excluded", ""),
	}
}

func newUserAccessTokensTableImpl(schemaName, tableName, alias string) userAccessTokensTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		SecretColumn    = postgres.StringColumn("secret")
		ExpiresAtColumn = postgres.TimestampzColumn("expires_at")
		UserIDColumn    = postgres.StringColumn("user_id")
		allColumns      = postgres.ColumnList{IDColumn, SecretColumn, ExpiresAtColumn, UserIDColumn}
		mutableColumns  = postgres.ColumnList{SecretColumn, ExpiresAtColumn, UserIDColumn}
	)

	return userAccessTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Secret:    SecretColumn,
		ExpiresAt: ExpiresAtColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
