version: "3.4"

volumes:
  postgres:

services:
# --- ingress --- #
  traefik:
    image: "traefik:v2.9.1"
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # listen to docker events
      - "${HEIMDALLR_ETC_TRAEFIK_DIR}/tls/certs/:/certs/" # mount certs
      - "${HEIMDALLR_ETC_TRAEFIK_DIR}/traefik.yaml:/etc/traefik/traefik.yaml" # mount config
      - "${HEIMDALLR_ETC_TRAEFIK_DIR}/traefik-dynamic-config.yaml:/traefik-dynamic-config.yaml"
    labels:
      - "prometheus.port=8082"

  ngrok:
    profiles:
      - ngrok
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ${HEIMDALLR_NGROK_CONFIG_FILE_PATH}:/etc/ngrok.yml
    ports:
      - 4040:4040

# --- app --- #
  api:
    profiles:
      - api
    build:
      context: .
      target: dev
    environment:
      APP_COMMAND: heimdallr
      AIR_DEBUG: ${HEIMDALLR_AIR_DEBUG}
      # See: https://github.com/testcontainers/testcontainers-go/issues/2477#issuecomment-2417815745
      TESTCONTAINERS_RYUK_DISABLED: true
    working_dir: /app
    volumes:
      - "${HEIMDALLR_DIR}/:/app"
      # So we can use testcontainers
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.routers.api.rule=Host(`${HEIMDALLR_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.services.api.loadbalancer.server.port=${HEIMDALLR_HTTP_PORT}"
      - "traefik.http.routers.api.tls=true"

  api-migrate:
    profiles:
      - manual
    image: migrate/migrate:4
    environment:
      POSTGRES_URL: postgres://${HEIMDALLR_POSTGRES_MIGRATOR_USER}:${HEIMDALLR_POSTGRES_MIGRATOR_PASSWORD}@postgres:5432/${HEIMDALLR_POSTGRES_DB}?search_path=${HEIMDALLR_POSTGRES_SCHEMA}&sslmode=disable
    volumes:
      - ${HEIMDALLR_MIGRATIONS_DIR}:/migrations
      - ${HEIMDALLR_DB_SCRIPTS_DIR}:/scripts
    entrypoint: /scripts/run.sh

# --- databases --- #
  postgres:
    profiles:
      - api
    image: postgres:17.0
    ports:
      - "${HEIMDALLR_POSTGRES_HOST_PORT}:5432"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: ${HEIMDALLR_POSTGRES_ROOT_PASSWORD}
      POSTGRES_USER: ${HEIMDALLR_POSTGRES_ROOT_USER}
      POSTGRES_DB: ${HEIMDALLR_POSTGRES_DB}
      HEIMDALLR_POSTGRES_SCHEMA: ${HEIMDALLR_POSTGRES_SCHEMA}
      HEIMDALLR_POSTGRES_APP_USER: ${HEIMDALLR_POSTGRES_APP_USER}
      HEIMDALLR_POSTGRES_APP_PASSWORD: ${HEIMDALLR_POSTGRES_APP_PASSWORD}
      HEIMDALLR_POSTGRES_MIGRATOR_USER: ${HEIMDALLR_POSTGRES_MIGRATOR_USER}
      HEIMDALLR_POSTGRES_MIGRATOR_PASSWORD: ${HEIMDALLR_POSTGRES_MIGRATOR_PASSWORD}
    volumes:
      - postgres:/var/lib/postgresql/data
      - ${HEIMDALLR_POSTGRES_INIT_DIR}:/docker-entrypoint-initdb.d

  pgadmin:
    # Latest tag is a bit naff, check occasionally for newer versions...
    image: dpage/pgadmin4:8.12
    profiles:
      - api
    environment:
      PGADMIN_DEFAULT_EMAIL: ${HEIMDALLR_PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${HEIMDALLR_PGADMIN_PASSWORD}
      # Disable login and security precautions; useful in dev
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_CONFIG_CHECK_EMAIL_DELIVERABILITY: 'False'
      PGADMIN_CONFIG_ALLOW_SPECIAL_EMAIL_DOMAINS: "['test']"
    volumes:
      - "${HEIMDALLR_PGADMIN_SERVERS_FILEPATH}:/pgadmin4/servers.json"
    labels:
      - "traefik.http.routers.pgadmin.rule=Host(`${HEIMDALLR_PGADMIN_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=${HEIMDALLR_PGADMIN_PORT}"
      - "traefik.http.routers.pgadmin.tls=true"

# --- mail --- #
  mailbox:
    image: maildev/maildev:latest
    restart: always
    command:
      - -w
      - "${HEIMDALLR_MAILBOX_HTTP_PORT}"
      - -s
      - ${HEIMDALLR_MAILBOX_SMTP_PORT}
      - --ip
      - "0.0.0.0"
      - --incoming-user
      - ${HEIMDALLR_MAILBOX_USERNAME}
      - --incoming-pass
      - ${HEIMDALLR_MAILBOX_PASSWORD}
    labels:
      - "traefik.http.routers.mailbox.rule=Host(`${HEIMDALLR_MAILBOX_PUBLIC_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.mailbox.entrypoints=websecure"
      - "traefik.http.services.mailbox.loadbalancer.server.port=${HEIMDALLR_MAILBOX_HTTP_PORT}"
      - "traefik.http.routers.mailbox.tls=true"

# --- docs --- #
  mkdocs:
    build:
      context: ${HEIMDALLR_ETC_MKDOCS}
    # image: squidfunk/mkdocs-material:latest
    # Doesn't exist for arm
    working_dir: /app
    restart: always
    labels:
      - "traefik.http.routers.mkdocs.rule=Host(`${HEIMDALLR_MKDOCS_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.mkdocs.entrypoints=websecure"
      - "traefik.http.services.mkdocs.loadbalancer.server.port=${HEIMDALLR_MKDOCS_PORT}"
      - "traefik.http.routers.mkdocs.tls=true"
    volumes:
      - .:/app

# --- monitoring --- #
  grafana:
    profiles:
      - grafana-stack-enabled
    build:
      context: ${HEIMDALLR_ETC_GRAFANA_STACK}/grafana
      args:
        GRAFANA_VERSION: 10.0.12
    environment:
      GF_LOG_LEVEL: ${HEIMDALLR_GRAFANA_LOG_LEVEL}
      GF_ADMIN_USERNAME: ${HEIMDALLR_GRAFANA_ADMIN_USERNAME}
      GF_ADMIN_PASSWORD: ${HEIMDALLR_GRAFANA_ADMIN_PASSWORD}
      GF_HTTP_PORT: ${HEIMDALLR_GRAFANA_HTTP_PORT}
      GF_DOMAIN: ${HEIMDALLR_GRAFANA_HOST}
      GF_MAIL_HOST: ${HEIMDALLR_MAILBOX_INTERNAL_HOST}
      GF_MAIL_USER: ${HEIMDALLR_MAILBOX_USERNAME}
      GF_MAIL_PASSWORD: ${HEIMDALLR_MAILBOX_PASSWORD}
      GF_LOKI_HOST: ${HEIMDALLR_LOKI_INTERNAL_HOST}
      GF_LOKI_PORT: ${HEIMDALLR_LOKI_HTTP_PORT}
      GF_PROVISIONING_PATH: ${HEIMDALLR_GRAFANA_PROVISIONING_PATH}
      GF_PROMETHEUS_HOST: ${HEIMDALLR_PROMETHEUS_INTERNAL_HOST}
      GF_PROMETHEUS_HTTP_PORT: ${HEIMDALLR_PROMETHEUS_HTTP_PORT}
    volumes:
      - '${HEIMDALLR_STORAGE_DIR}/grafana:/var/lib/grafana'
      - '${HEIMDALLR_ETC_GRAFANA_STACK}/grafana/conf/defaults.ini:/usr/share/grafana/conf/defaults.ini'
      - '${HEIMDALLR_ETC_GRAFANA_STACK}/grafana/provisioning:${HEIMDALLR_GRAFANA_PROVISIONING_PATH}'
    labels:
      - "traefik.http.routers.grafana.rule=Host(`${HEIMDALLR_GRAFANA_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.services.grafana.loadbalancer.server.port=${HEIMDALLR_GRAFANA_HTTP_PORT}"
      - "traefik.http.routers.grafana.tls=true"

  loki:
    profiles:
      - grafana-stack-enabled
    image: grafana/loki:2.9.2
    command: 
      - -config.expand-env=true
      - -config.file=${HEIMDALLR_LOKI_CONFIG_PATH}
    environment:
      LOKI_HTTP_PORT: ${HEIMDALLR_LOKI_HTTP_PORT}
    volumes:
      - '${HEIMDALLR_ETC_GRAFANA_STACK}/loki/conf/config.yaml:${HEIMDALLR_LOKI_CONFIG_PATH}'
      - '${HEIMDALLR_STORAGE_DIR}/loki:/tmp/loki'
    labels:
      - "traefik.http.routers.loki.rule=Host(`${HEIMDALLR_LOKI_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.services.loki.loadbalancer.server.port=${HEIMDALLR_LOKI_HTTP_PORT}"
      - "traefik.http.routers.loki.tls=true"

  promtail:
    profiles:
      - grafana-stack-enabled
    image: grafana/promtail:2.9.2
    environment:
      PROMTAIL_HTTP_PORT: ${HEIMDALLR_PROMTAIL_HTTP_PORT}
      PROMTAIL_LOKI_HOST: ${HEIMDALLR_LOKI_INTERNAL_HOST}
      PROMTAIL_LOKI_PORT: ${HEIMDALLR_LOKI_HTTP_PORT}
    volumes:
      - '${HEIMDALLR_ETC_GRAFANA_STACK}/promtail/conf/config.yaml:${HEIMDALLR_PROMTAIL_CONFIG_PATH}'
      - '${HEIMDALLR_STORAGE_DIR}/promtail:/tmp/promtail'
      # Allows us to pull logs from docker
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      # - /var/log:/var/log
    command: 
      - -config.expand-env=true
      - -config.file=${HEIMDALLR_PROMTAIL_CONFIG_PATH}

  prometheus:
    profiles:
      - grafana-stack-enabled
    image: prom/prometheus:v2.50.1
    # So it can access the docker socket...
    # Not ideal, but this is only dev.
    user: root
    volumes:
      - '${HEIMDALLR_ETC_GRAFANA_STACK}/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml'
      - '${HEIMDALLR_STORAGE_DIR}/prometheus:/prometheus'
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # listen to docker events
    labels:
      - "traefik.http.routers.prometheus.rule=Host(`${HEIMDALLR_PROMETHEUS_HOST}`)"
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.services.prometheus.loadbalancer.server.port=${HEIMDALLR_PROMETHEUS_HTTP_PORT}"
      - "traefik.http.routers.prometheus.tls=true"

# --- tls --- #
  minica: 
    profiles: 
      - manual
    build:
      context: ./etc/tls/minica
    working_dir: /srv
    volumes:
      - "${HEIMDALLR_MINICA_CERTS_DIR}:/srv"
